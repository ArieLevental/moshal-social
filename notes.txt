client\src\App.js

- Pretty clean and well structured, however there's alot being loaded here 
i would take a look at code splitting from react itself, 
Suspense & Lazy and wrap your components accordingly

https://legacy.reactjs.org/docs/code-splitting.html

- I'm not sure if you do already but if you are implementing this take a look at
skeleton loaders to improve UX when data is being fetched or loaded etc


- Try to handle specific logic that isnt relevant to the page itself but 'component-scoped'
outside of your App.js to keep it as slim as possible 

- Goodjob on the router authentication bit but it seems like you are rendering the component regardless of the auth status and you just route accordingly, which obviously works! but a more efficient way to handle this is creating a private route component that verifies user auth status BEFORE rendering your component(s), this way you dont check EVERY route but once per component


client\src\index.js

- Looks very good!!, however add some sense of error handler if component level code fails (try block ?)


client\src\scenes\jobsPage\index.js

- Lots of stuff going on with the fetchData  function using the same parameters, grab this logic and throw it into 1 dynamic function that you use for both

- There seems to be no error handling for non-expected API responses (api being offline etc, whatever you name it)

- Component naming could be a bit more specific


client\src\scenes\homePage\index.js

- fetchData has no error handling!

-